// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  username      String?   @unique
  name          String?
  email         String   @unique
  rating        Int      @default(1200)
  gamesAsWhite  Game[]   @relation("GamesAsWhite")
  gamesAsBlack  Game[]   @relation("GamesAsBlack")
  chatMessages  ChatMessage[]
}

model Game {
  id            String   @id @default(uuid())
  whitePlayerId String
  blackPlayerId String
  whitePlayer   User   @relation("GamesAsWhite", fields: [whitePlayerId], references: [id])
  blackPlayer   User   @relation("GamesAsBlack", fields: [blackPlayerId], references: [id])
  status        GameStatus
  result        GameResult?
  startingFen   String  @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1")
  currentFen    String
  moves         Move[]
  chatMessages  ChatMessage[]
}


model Move{
  id            String    @id @default(uuid())
  gameId        String
  game          Game      @relation(fields: [gameId], references: [id])
  moveNumber    Int
  from          String
  to            String
}

model ChatMessage {
  id        String @id @default(uuid())
  game      Game @relation(fields: [gameId], references: [id])
  gameId    String
  user      User @relation(fields: [userId], references: [id])
  userId    String
  message   String
  timestamp DateTime @default(now())
}

enum GameStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
  TIME_UP
  PLAYER_EXIT
}

enum GameResult {
  WHITE_WINS
  BLACK_WINS
  DRAW
}
